
https://github.com/Kulbear/deep-learning-coursera/blob/master/Convolutional%20Neural%20Networks/Convolution%20model%20-%20Step%20by%20Step%20-%20v1.ipynb

Prepare data


    Read in
    Split into training and test

Read topology of network

Initialize the parameters
	add padding to each image in input vector set


	# for element in each channel
		# apply convolution filter
			input matrix * filter element-wise
			sum all elements
			add bias
			return real valued float




notes {{{


    
    # Retrieve dimensions from A_prev's shape (≈1 line)  
    # (m, n_H_prev, n_W_prev, n_C_prev) = None
    
    # Retrieve dimensions from W's shape (≈1 line)
    # (f, f, n_C_prev, n_C) = None
    
    # Retrieve information from "hparameters" (≈2 lines)
    # stride = None
    # pad = None
    
    # Compute the dimensions of the CONV output volume using the formula given above. 
    # Hint: use int() to apply the 'floor' operation. (≈2 lines)
    # n_H = None
    # n_W = None
    
    # Initialize the output volume Z with zeros. (≈1 line)
    # Z = None
    
    # Create A_prev_pad by padding A_prev
    # A_prev_pad = None
    
    # for i in range(None):               # loop over the batch of training examples
        # a_prev_pad = None               # Select ith training example's padded activation
        # for h in range(None):           # loop over vertical axis of the output volume
            # Find the vertical start and end of the current "slice" (≈2 lines)
            # vert_start = None
            # vert_end = None
            
            # for w in range(None):       # loop over horizontal axis of the output volume
                # Find the horizontal start and end of the current "slice" (≈2 lines)
                # horiz_start = None
                # horiz_end = None
                
                # for c in range(None):   # loop over channels (= #filters) of the output volume
                                        
                    # Use the corners to define the (3D) slice of a_prev_pad (See Hint above the cell). (≈1 line)
                    # a_slice_prev = None
                    
                    # Convolve the (3D) slice with the correct filter W and bias b, to get back one output neuron. (≈3 line)
                    # weights = None
                    # biases = None
                    # Z[i, h, w, c] = None

}}}


    (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape                   # Retrieve dimensions from A_prev's shape
    (f, f, n_C_prev, n_C)             = W.shape                        # Retrieve dimensions from W's shape
	stride = hparameters["stride"]                                     # Retrieve information from "hparameters"
    pad    = hparameters["pad"]                                        # Retrieve information from "hparameters"
    n_H    = int(np.floor ( ( n_H_prev - f + (2*pad) ) / stride ) + 1) # Compute the dimensions of the CONV output volume using the formula
    n_W    = int(np.floor ( ( n_W_prev - f + (2*pad) ) / stride ) + 1) # Compute the dimensions of the CONV output volume using the formula
    Z      = np.zeros((m, n_H, n_W, n_C))                              # Initialize the output volume Z with zeros.
    A_prev_pad = zero_pad(A_prev, pad)                                 # Create A_prev_pad by padding A_prev


    for i in range(m):               # loop over the batch of training examples
        for h in range(n_H):         # loop over vertical axis of the output volume
            for w in range(n_W):     # loop over horizontal axis of the output volume
                for c in range(n_C): # loop over channels (num filters) of the output volume

					a_prev_pad    = A_prev_pad[i]   # Select ith training example's padded activation
					vert_start    = h * stride      # Find the vertical start and end of the current "slice"
					vert_end      = vert_start + f  # Find the vertical start and end of the current "slice"
					horiz_start   = w * stride      # Find the horizontal start and end of the current "slice"
					horiz_end     = horiz_start + f # Find the horizontal start and end of the current "slice"

					# Use the corners to define the (3D) slice of a_prev_pad
					a_slice_prev  = a_prev_pad[vert_start:vert_end,horiz_start:horiz_end,:]

					# Convolve the (3D) slice with the correct filter W and bias b, to get back one output neuron. (≈3 line)
					Z[i, h, w, c] = conv_single_step(a_slice_prev, W[...,c], b[...,c])
